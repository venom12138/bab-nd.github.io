#!/bin/bash

# Default audio bitrate in bits per second
AUDIO_BITRATE=128000  # 128 kbps

# Parse command-line arguments
while getopts ":i:o:f:" opt; do
  case $opt in
    i) input_filename="$OPTARG"
    ;;
    o) output_filename="$OPTARG"
    ;;
    f) desired_size_mb="$OPTARG"
    ;;
    \?) echo "Invalid option -$OPTARG" >&2
        exit 1
    ;;
  esac
done

# Check if all arguments are provided
if [ -z "$input_filename" ] || [ -z "$output_filename" ] || [ -z "$desired_size_mb" ]; then
    echo "Usage: $0 -i [input_filename] -o [output_filename] -f [desired_size_in_MB]"
    exit 1
fi

# Get the video duration in seconds
duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$input_filename")
duration=${duration%.*}  # Remove decimal part

if [ -z "$duration" ]; then
    echo "Could not determine video duration."
    exit 1
fi

# Calculate total bitrate in bits per second
desired_size_bits=$(echo "$desired_size_mb * 1024 * 1024 * 8" | bc)
total_bitrate=$(echo "$desired_size_bits / $duration" | bc)

# Ensure total bitrate is greater than audio bitrate
if [ "$total_bitrate" -le "$AUDIO_BITRATE" ]; then
    echo "Desired file size is too small for the video's length and audio bitrate."
    exit 1
fi

# Calculate video bitrate
video_bitrate=$(echo "$total_bitrate - $AUDIO_BITRATE" | bc)

# Convert video bitrate to kilobits per second for ffmpeg (divide by 1000)
video_bitrate_kbps=$(echo "$video_bitrate / 1000" | bc)

# Execute the ffmpeg commands
ffmpeg -y -i "$input_filename" -c:v libx264 -b:v "${video_bitrate_kbps}k" -vf scale=1280:-2 -pass 1 -an -f null /dev/null && \
ffmpeg -i "$input_filename" -c:v libx264 -b:v "${video_bitrate_kbps}k" -pass 2 -c:a aac -b:a 128k "$output_filename"

# Clean up pass log files generated by ffmpeg
rm -f ffmpeg2pass-0.log ffmpeg2pass-0.log.mbtree